#version 330 core

in vec2 vUv0; // out del vertex shader

uniform vec4 InColor;
uniform vec4 OutColor1;
uniform vec4 OutColor2;

uniform sampler2D textura1;

const int MaxIter = 500;

out vec4 fFragColor;

void main(){
//Se puede modificar el recuadro transformando (Cr,Ci)
//Traslaci√≥n:Cr = Cr -1.5
//Zoom : Cr *= 0.5 Ci *= 0.5

	//Color de la textura
	vec3 colorAuxText = vec3(texture2D(textura1, vUv0));
	vec4 colorText = vec4(colorAuxText, 1.0);

	float Creal = vUv0.s - 1.5; //traslacion
	float Cimag = vUv0.t;
	float real = Creal; //Zr
	float imag = Cimag; // Zi
	float z2 = 0.0; // Z*Z
	int iter = 0;
	float tempreal = 0.0;
	while(iter < MaxIter && z2 < 4.0){
		tempreal = real;
		real = (tempreal * tempreal) - (imag * imag) + Creal;
		imag = 2.0 * tempreal * imag + Cimag;
		z2 = (real * real) + (imag * imag);
		iter = iter+1;
	}

	vec4 color = InColor; //in Mandelbrot set

	//Si no pertenece a Mandelbrot
	if(z2 > 4.0)
		color = mix(OutColor1, OutColor2, fract(float(iter) * 0.04));
											//fract(float(iter)/25.0)

	 //color = vec4(colorText.x * color.x,colorText.y * color.y,colorText.z * color.z,colorText.w * color.w);
     fFragColor = vec4(color);
}
