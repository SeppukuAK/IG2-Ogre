#version 330 core

in vec2 vUv0; // out del vertex shader
in vec2 vUv1; // out del vertex shader

uniform vec4 InColor;
uniform vec4 OutColor1;
uniform vec4 OutColor2;

uniform sampler2D textura1;
uniform float tiempoD;
uniform float FB;

const int MaxIter = 500;

out vec4 fFragColor;

void main(){
//Se puede modificar el recuadro transformando (Cr,Ci)
//Traslaci√≥n:Cr = Cr -1.5
//Zoom : Cr *= 0.5 Ci *= 0.5

	
	float Creal = (vUv0.s-1.78); //traslacion
	float Cimag = vUv0.t;

	//Zoom
	Creal = Creal* (1- 1/FB) - (1/FB)*1.78;
	Cimag = Cimag*(1-1/FB);

	float real = Creal; //Zr
	float imag = Cimag; // Zi
	float z2 = 0.0; // Z*Z
	int iter = 0;
	float tempreal = 0.0;
	while(iter < MaxIter && z2 < 4.0){
		tempreal = real;
		real = (tempreal * tempreal) - (imag * imag) + Creal;
		imag = 2.0 * tempreal * imag + Cimag;
		z2 = (real * real) + (imag * imag);
		iter = iter+1;
	}

	vec4 color = InColor; //in Mandelbrot set

	//Si no pertenece a Mandelbrot
	if(z2 > 4.0)
		color = mix(OutColor1, OutColor2, fract(float(iter)*FB));
											//fract(float(iter)/25.0)

	//Color de la textura
	vec3 colorAuxText = vec3(texture2D(textura1, vUv1));
	vec4 colorText = vec4(colorAuxText, 1.0);

	color = color * colorText;
    fFragColor = vec4(color);
}
